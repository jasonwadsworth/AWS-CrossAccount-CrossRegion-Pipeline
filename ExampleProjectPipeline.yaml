AWSTemplateFormatVersion: '2010-09-09'
Description: Continuous integration project for ExampleProject
Parameters:
  GitHubUrl:
    Description: The HTTPS URL for GitHub for the project
    Type: String
  DevelopmentAccount:
    Type: String
  DevelopmentRegion:
    Description: AWS Region of development
    Type: String
  DevelopmentRegionS3Bucket:
    Description: The S3 bucket used for the region of development
    Type: String
  DevelopmentRegionCMK:
    Description: The customer master key to use for the region of development
    Type: String
  DeployToTesting:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  TestingAccount:
    Type: String
  TestingRegion:
    Description: AWS Region of testing
    Type: String
  TestingRegionS3Bucket:
    Description: The S3 bucket used for the region of testing
    Type: String
  TestingRegionCMK:
    Description: The customer master key to use for the region of testing
    Type: String
  DeployToProduction:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  ProductionAccount:
    Type: String
  ProductionRegion:
    Description: AWS Region of production
    Type: String
  ProductionRegionS3Bucket:
    Description: The S3 bucket used for the region of production
    Type: String
  ProductionRegionCMK:
    Description: The customer master key to use for the region of production
    Type: String
Conditions:
  DeployTesting:
    'Fn::Equals':
      - !Ref DeployToTesting
      - 'true'
  DeployProduction:
    'Fn::Equals':
      - !Ref DeployToProduction
      - 'true'
  CreateTestingRegionResources:
    'Fn::And':
      - 'Fn::Equals':
          - !Ref DeployToTesting
          - 'true'
      - 'Fn::Not':
          - 'Fn::Equals':
              - !Ref DevelopmentRegion
              - !Ref TestingRegion
  CreateProductionRegionResources:
    'Fn::And':
      - 'Fn::Equals':
          - !Ref DeployToTesting
          - 'true'
      - 'Fn::Not':
          - 'Fn::Equals':
              - !Ref DevelopmentRegion
              - !Ref ProductionRegion
      - 'Fn::Not':
          - 'Fn::Equals':
              - !Ref TestingRegion
              - !Ref ProductionRegion
Resources:
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ExampleProject-CodeBuild
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      ManagedPolicyArns:
        - !Ref CodeBuildPolicy
  CodeBuildPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for ExampleProject CodeBuild project
      ManagedPolicyName: ExampleProject-CodeBuild
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/ExampleProject*'
            Effect: Allow
          - Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
            Resource:
              - 'Fn::Sub':
                  - 'arn:aws:s3:::${Bucket}'
                  - Bucket: !ImportValue BuildBucket
              - 'Fn::Sub':
                  - 'arn:aws:s3:::${Bucket}/*'
                  - Bucket: !ImportValue BuildBucket
            Effect: Allow
  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Description: Continuous integration build for ExampleProject
      Name: ExampleProject
      Artifacts:
        Type: S3
        Packaging: ZIP
        Location: !ImportValue BuildBucket
        Name: ExampleProject.zip
        OverrideArtifactName: true
        Path: ExampleProject
      SecondaryArtifacts:
        - ArtifactIdentifier: LambdaFunction
          Type: S3
          Packaging: ZIP
          Location: !ImportValue BuildBucket
          Name: ExampleProject.LambdaFunction.zip
          OverrideArtifactName: true
          Path: ExampleProject/LambdaFunction
      ServiceRole: !Ref CodeBuildRole
      Environment:
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/dot-net:core-2.1'
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: 'PULL_REQUEST_CREATED,PULL_REQUEST_UPDATED,PULL_REQUEST_REOPENED'
            - Type: BASE_REF
              Pattern: ^refs/heads/master$
          - - Type: EVENT
              Pattern: PUSH
            - Type: HEAD_REF
              Pattern: ^refs/heads/master$
      Source:
        Auth:
          Type: OAUTH
        Type: GITHUB
        BuildSpec: buildspec.yml
        Location: !Ref GitHubUrl
        ReportBuildStatus: true
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ExampleProject-CodePipeline
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref 'AWS::AccountId'
            Action: 'sts:AssumeRole'
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
      ManagedPolicyArns:
        - !Ref CodePipelinePolicy
  CodePipelinePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for ExampleProject CodePipeline
      ManagedPolicyName: ExampleProject-CodePipeline
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'codepipeline:*'
              - 'iam:ListRoles'
              - 'cloudformation:Describe*'
              - 'cloudFormation:List*'
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:UpdateStack'
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:DeleteChangeSet'
              - 'cloudformation:DescribeChangeSet'
              - 'cloudformation:ExecuteChangeSet'
              - 'cloudformation:SetStackPolicy'
              - 'cloudformation:ValidateTemplate'
              - 'iam:PassRole'
              - 's3:ListAllMyBuckets'
              - 's3:GetBucketLocation'
            Resource: '*'
            Effect: Allow
          - Action:
              - 'sns:Publish'
            Effect: Allow
            Resource: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PipelineManualIntervention'
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - !ImportValue CrossAccountCMK
              - !Ref DevelopmentRegionCMK
              - 'Fn::If':
                  - DeployTesting
                  - !Ref TestingRegionCMK
                  - !Ref 'AWS::NoValue'
              - 'Fn::If':
                  - DeployProduction
                  - !Ref ProductionRegionCMK
                  - !Ref 'AWS::NoValue'
          - Action:
              - 's3:GetBucketPolicy'
              - 's3:ListBucket'
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - 'Fn::Sub':
                  - 'arn:aws:s3:::${Bucket}'
                  - Bucket: !ImportValue BuildBucket
              - 'Fn::Sub':
                  - 'arn:aws:s3:::${Bucket}/*'
                  - Bucket: !ImportValue BuildBucket
          - Action:
              - 's3:GetBucketPolicy'
              - 's3:ListBucket'
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${DevelopmentRegionS3Bucket}'
              - !Sub 'arn:aws:s3:::${DevelopmentRegionS3Bucket}/*'
          - 'Fn::If':
              - DeployTesting
              - Action:
                  - 's3:GetBucketPolicy'
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${TestingRegionS3Bucket}'
                  - !Sub 'arn:aws:s3:::${TestingRegionS3Bucket}/*'
              - !Ref 'AWS::NoValue'
          - 'Fn::If':
              - DeployProduction
              - Action:
                  - 's3:GetBucketPolicy'
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${ProductionRegionS3Bucket}'
                  - !Sub 'arn:aws:s3:::${ProductionRegionS3Bucket}/*'
              - !Ref 'AWS::NoValue'
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Resource:
              - !GetAtt PipelineSourceRole.Arn
              - !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CodePipeline'
              - 'Fn::If':
                  - DeployTesting
                  - !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CodePipeline'
                  - !Ref 'AWS::NoValue'
              - 'Fn::If':
                  - DeployProduction
                  - !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CodePipeline'
                  - !Ref 'AWS::NoValue'
  PipelineSourceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ExampleProject-PipelineSource
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Ref 'AWS::AccountId'
      ManagedPolicyArns:
        - !Ref PipelineSourcePolicy
  PipelineSourcePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: ExampleProject-PipelineSource
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - 'Fn::Sub':
                  - 'arn:aws:s3:::${Bucket}'
                  - Bucket: !ImportValue BuildBucket
              - 'Fn::Sub':
                  - 'arn:aws:s3:::${Bucket}/*'
                  - Bucket: !ImportValue BuildBucket
              - !Sub 'arn:aws:s3:::${DevelopmentRegionS3Bucket}'
              - !Sub 'arn:aws:s3:::${DevelopmentRegionS3Bucket}/*'
              - 'Fn::If':
                  - DeployTesting
                  - !Sub 'arn:aws:s3:::${TestingRegionS3Bucket}'
                  - !Ref 'AWS::NoValue'
              - 'Fn::If':
                  - DeployTesting
                  - !Sub 'arn:aws:s3:::${TestingRegionS3Bucket}/*'
                  - !Ref 'AWS::NoValue'
              - 'Fn::If':
                  - DeployProduction
                  - !Sub 'arn:aws:s3:::${ProductionRegionS3Bucket}'
                  - !Ref 'AWS::NoValue'
              - 'Fn::If':
                  - DeployProduction
                  - !Sub 'arn:aws:s3:::${ProductionRegionS3Bucket}/*'
                  - !Ref 'AWS::NoValue'
          - Effect: Allow
            Action:
              - 'kms:*'
            Resource:
              - !ImportValue CrossAccountCMK
              - !Ref DevelopmentRegionCMK
              - 'Fn::If':
                  - DeployTesting
                  - !Ref TestingRegionCMK
                  - !Ref 'AWS::NoValue'
              - 'Fn::If':
                  - DeployProduction
                  - !Ref ProductionRegionCMK
                  - !Ref 'AWS::NoValue'
          - Action: 'lambda:*'
            Effect: Allow
            Resource: !ImportValue SyncArtifactsFunctionArn
  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: ExampleProject
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStores:
        - ArtifactStore:
            Location: !Ref DevelopmentRegionS3Bucket
            Type: S3
            EncryptionKey:
              Id: !Ref DevelopmentRegionCMK
              Type: KMS
          Region: !Ref DevelopmentRegion
        - 'Fn::If':
            - CreateTestingRegionResources
            - ArtifactStore:
                Location: !Ref TestingRegionS3Bucket
                Type: S3
                EncryptionKey:
                  Id: !Ref TestingRegionCMK
                  Type: KMS
              Region: !Ref TestingRegion
            - !Ref 'AWS::NoValue'
        - 'Fn::If':
            - CreateProductionRegionResources
            - ArtifactStore:
                Location: !Ref ProductionRegionS3Bucket
                Type: S3
                EncryptionKey:
                  Id: !Ref ProductionRegionCMK
                  Type: KMS
              Region: !Ref ProductionRegion
            - !Ref 'AWS::NoValue'
      Stages:
        - Name: Source
          Actions:
            - Name: PrimarySource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !ImportValue BuildBucket
                S3ObjectKey: ExampleProject/ExampleProject.zip
                PollForSourceChanges: 'true'
              OutputArtifacts:
                - Name: PrimaryOutput
              RoleArn: !GetAtt PipelineSourceRole.Arn
              RunOrder: 1
            - Name: LambdaSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !ImportValue BuildBucket
                S3ObjectKey: ExampleProject/LambdaFunction/Lambda.zip
                PollForSourceChanges: 'false'
              OutputArtifacts:
                - Name: LambdaOutput
              RoleArn: !GetAtt PipelineSourceRole.Arn
              RunOrder: 1
        - Name: SyncArtifacts
          Actions:
            - Name: SyncDevelopmentArtifacts
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !ImportValue SyncArtifactsFunction
                UserParameters: !Sub '{ "DestinationBucket": "${DevelopmentRegionS3Bucket}" }'
              InputArtifacts:
                - Name: PrimaryOutput
                - Name: LambdaOutput
              RunOrder: 1
              RoleArn: !GetAtt PipelineSourceRole.Arn
            - 'Fn::If':
                - DeployTesting
                - Name: SyncTestingArtifacts
                  ActionTypeId:
                    Category: Invoke
                    Owner: AWS
                    Provider: Lambda
                    Version: '1'
                  Configuration:
                    FunctionName: !ImportValue SyncArtifactsFunction
                    UserParameters: !Sub '{ "DestinationBucket": "${TestingRegionS3Bucket}" }'
                  InputArtifacts:
                    - Name: PrimaryOutput
                    - Name: LambdaOutput
                  RunOrder: 1
                  RoleArn: !GetAtt PipelineSourceRole.Arn
                - !Ref 'AWS::NoValue'
            - 'Fn::If':
                - DeployProduction
                - Name: SyncProductionArtifacts
                  ActionTypeId:
                    Category: Invoke
                    Owner: AWS
                    Provider: Lambda
                    Version: '1'
                  Configuration:
                    FunctionName: !ImportValue SyncArtifactsFunction
                    UserParameters: !Sub '{ "DestinationBucket": "${ProductionRegionS3Bucket}" }'
                  InputArtifacts:
                    - Name: PrimaryOutput
                    - Name: LambdaOutput
                  RunOrder: 1
                  RoleArn: !GetAtt PipelineSourceRole.Arn
                - !Ref 'AWS::NoValue'
        - Name: Deploy-Development
          Actions:
            - Name: CreatePrimaryChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_REPLACE
                StackName: ExampleProject
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: 'PrimaryOutput::ExampleProject.yaml'
                RoleArn: !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CloudFormation'
              InputArtifacts:
                - Name: PrimaryOutput
              Region: !Ref DevelopmentRegion
              RunOrder: 1
              RoleArn: !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CodePipeline'
            - Name: ExecutePrimaryChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ExampleProject
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CloudFormation'
              Region: !Ref DevelopmentRegion
              RunOrder: 2
              RoleArn: !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CodePipeline'
            - Name: CreateLambdaChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_REPLACE
                StackName: ExampleProject-LambdaFunction
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: 'LambdaOutput::deploy.yaml'
                ParameterOverrides: '{ "BucketName": { "Fn::GetArtifactAtt": [ "LambdaOutput", "BucketName" ] }, "ObjectKey": { "Fn::GetArtifactAtt": [ "LambdaOutput", "ObjectKey" ] } }'
                RoleArn: !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CloudFormation'
              InputArtifacts:
                - Name: LambdaOutput
              Region: !Ref DevelopmentRegion
              RunOrder: 1
              RoleArn: !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CodePipeline'
            - Name: ExecuteLambdaChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ExampleProject-LambdaFunction
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CloudFormation'
              Region: !Ref DevelopmentRegion
              RunOrder: 2
              RoleArn: !Sub 'arn:aws:iam::${DevelopmentAccount}:role/CrossAccount-CodePipeline'
        - 'Fn::If':
            - DeployTesting
            - Name: Deploy-Testing
              Actions:
                - Name: CreatePrimaryChangeSet
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ChangeSetName: DeployChangeSet
                    ActionMode: CHANGE_SET_REPLACE
                    StackName: ExampleProject
                    Capabilities: CAPABILITY_NAMED_IAM
                    TemplatePath: 'PrimaryOutput::ExampleProject.yaml'
                    RoleArn: !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CloudFormation'
                  InputArtifacts:
                    - Name: PrimaryOutput
                  Region: !Ref TestingRegion
                  RunOrder: 1
                  RoleArn: !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CodePipeline'
                - Name: ExecutePrimaryChangeSet
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ChangeSetName: DeployChangeSet
                    ActionMode: CHANGE_SET_EXECUTE
                    StackName: ExampleProject
                    Capabilities: CAPABILITY_NAMED_IAM
                    RoleArn: !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CloudFormation'
                  Region: !Ref TestingRegion
                  RunOrder: 2
                  RoleArn: !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CodePipeline'
                - Name: CreateLambdaChangeSet
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ChangeSetName: DeployChangeSet
                    ActionMode: CHANGE_SET_REPLACE
                    StackName: ExampleProject-LambdaFunction
                    Capabilities: CAPABILITY_NAMED_IAM
                    TemplatePath: 'LambdaOutput::deploy.yaml'
                    ParameterOverrides: '{ "BucketName": { "Fn::GetArtifactAtt": [ "LambdaOutput", "BucketName" ] }, "ObjectKey": { "Fn::GetArtifactAtt": [ "LambdaOutput", "ObjectKey" ] } }'
                    RoleArn: !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CloudFormation'
                  InputArtifacts:
                    - Name: LambdaOutput
                  Region: !Ref TestingRegion
                  RunOrder: 1
                  RoleArn: !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CodePipeline'
                - Name: ExecuteLambdaChangeSet
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ChangeSetName: DeployChangeSet
                    ActionMode: CHANGE_SET_EXECUTE
                    StackName: ExampleProject-LambdaFunction
                    Capabilities: CAPABILITY_NAMED_IAM
                    RoleArn: !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CloudFormation'
                  Region: !Ref TestingRegion
                  RunOrder: 2
                  RoleArn: !Sub 'arn:aws:iam::${TestingAccount}:role/CrossAccount-CodePipeline'
            - !Ref 'AWS::NoValue'
        - 'Fn::If':
            - DeployProduction
            - Name: Deploy-Production
              Actions:
                - Name: ProductionApproval
                  ActionTypeId:
                    Category: Approval
                    Owner: AWS
                    Provider: Manual
                    Version: '1'
                  Configuration:
                    CustomData: Example Project Production Deployment
                    NotificationArn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PipelineManualIntervention'
                  RunOrder: 2
                - Name: CreatePrimaryChangeSet
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ChangeSetName: DeployChangeSet
                    ActionMode: CHANGE_SET_REPLACE
                    StackName: ExampleProject
                    Capabilities: CAPABILITY_NAMED_IAM
                    TemplatePath: 'PrimaryOutput::ExampleProject.yaml'
                    RoleArn: !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CloudFormation'
                  InputArtifacts:
                    - Name: PrimaryOutput
                  Region: !Ref ProductionRegion
                  RunOrder: 1
                  RoleArn: !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CodePipeline'
                - Name: ExecutePrimaryChangeSet
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ChangeSetName: DeployChangeSet
                    ActionMode: CHANGE_SET_EXECUTE
                    StackName: ExampleProject
                    Capabilities: CAPABILITY_NAMED_IAM
                    RoleArn: !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CloudFormation'
                  Region: !Ref ProductionRegion
                  RunOrder: 3
                  RoleArn: !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CodePipeline'
                - Name: CreateLambdaChangeSet
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ChangeSetName: DeployChangeSet
                    ActionMode: CHANGE_SET_REPLACE
                    StackName: ExampleProject-LambdaFunction
                    Capabilities: CAPABILITY_NAMED_IAM
                    TemplatePath: 'LambdaOutput::deploy.yaml'
                    ParameterOverrides: '{ "BucketName": { "Fn::GetArtifactAtt": [ "LambdaOutput", "BucketName" ] }, "ObjectKey": { "Fn::GetArtifactAtt": [ "LambdaOutput", "ObjectKey" ] } }'
                    RoleArn: !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CloudFormation'
                  InputArtifacts:
                    - Name: LambdaOutput
                  Region: !Ref ProductionRegion
                  RunOrder: 1
                  RoleArn: !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CodePipeline'
                - Name: ExecuteLambdaChangeSet
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ChangeSetName: DeployChangeSet
                    ActionMode: CHANGE_SET_EXECUTE
                    StackName: ExampleProject-LambdaFunction
                    Capabilities: CAPABILITY_NAMED_IAM
                    RoleArn: !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CloudFormation'
                  Region: !Ref ProductionRegion
                  RunOrder: 3
                  RoleArn: !Sub 'arn:aws:iam::${ProductionAccount}:role/CrossAccount-CodePipeline'
            - !Ref 'AWS::NoValue'
