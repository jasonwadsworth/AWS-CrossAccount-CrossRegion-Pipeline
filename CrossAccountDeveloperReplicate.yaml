AWSTemplateFormatVersion: '2010-09-09'
Description: Cross account developer replication stack.
Parameters:
  DeveloperOrgPath:
    Type: String
Resources:
  # this table is used to manage where to replicate the build artifacts to
  Table:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: CrossAccount-DeveloperBuildReplication
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # Role for the replication registration function.
  ReplicationRegistrationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccount-DeveloperBuildReplicationRegistration
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref ReplicationRegistrationPolicy

  # This policy allows the replication registration function to write data in the DynamoDB table
  ReplicationRegistrationPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CrossAccount-DeveloperBuildReplicationRegistration
      Description: Policy for replicating S3 data for developer account pipelines
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - dynamodb:DeleteItem
              - dynamodb:PutItem
            Effect: Allow
            Resource:
              - !GetAtt Table.Arn
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CrossAccount-DeveloperBuildReplicationRegistration'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CrossAccount-DeveloperBuildReplicationRegistration:*'

  ReplicationRegistrationLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/CrossAccount-DeveloperBuildReplicationRegistration
      RetentionInDays: 3

  ReplicationRegistrationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        # Modify this function handle the registration request and add/remove the record in the table
        ZipFile: |
          const AWS = require('aws-sdk')
          const dynamoDB = new AWS.DynamoDB.DocumentClient();

          exports.handler = async function main(event, context) {
            console.info(JSON.stringify(event));
            for (const record of event.Records) {
              const message = JSON.parse(record.Sns.Message);
              const id = message.PhysicalResourceId || message.ResourceProperties.BucketName;
              try {

                if (message.RequestType === 'Create') {
                  await dynamoDB.put({
                    ConditionExpression: `attribute_not_exists(pk)`,
                    TableName: 'CrossAccount-DeveloperBuildReplication',
                    Item: {
                      id: id,
                      bucketName: message.ResourceProperties.BucketName,
                      accountId: message.ResourceProperties.AccountId,
                      region: message.ResourceProperties.Region
                    }
                  }).promise();
                }
                else if (message.RequestType === 'Update') {
                  await dynamoDB.put({
                    //ConditionExpression: `attribute_exists(pk)`,
                    TableName: 'CrossAccount-DeveloperBuildReplication',
                    Item: {
                      id: id,
                      bucketName: message.ResourceProperties.BucketName,
                      accountId: message.ResourceProperties.AccountId,
                      region: message.ResourceProperties.Region
                    }
                  }).promise();
                }
                else if (message.RequestType === 'Delete') {
                  await dynamoDB.delete({
                    TableName: 'CrossAccount-DeveloperBuildReplication',
                    Key: {
                      id: id
                    }
                  }).promise();
                }
                else {
                  await send(message, context, 'FAILED', id, `Unknown RequestType '${message.RequestType}'`);
                }

                await send(message, context, 'SUCCESS', id);
              }
              catch (e) {
                console.error(e);
                await send(message, context, 'FAILED', id, 'Error registering');
              }
            }
          };

          async function send(event, context, responseStatus, physicalResourceId, reason) {
              const responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: reason,
                  PhysicalResourceId: physicalResourceId,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  NoEcho: false
              });

              console.log("Response body:\n", responseBody);

              var https = require("https");
              var url = require("url");

              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };

              return new Promise(function(resolve, reject) {
                  var req = https.request(options, function(res) {
                      // reject on bad status
                      if (res.statusCode < 200 || res.statusCode >= 300) {
                          return reject(new Error('statusCode=' + res.statusCode));
                      }
                  });
                  // reject on request error
                  req.on('error', function(err) {
                      // This is not a "Second reject", just a different sort of failure
                      reject(err);
                  });

                  req.write(responseBody);
                  // IMPORTANT
                  req.end();
              });
          }

      Description: Registers a bucket in a developer account for replication
      FunctionName: CrossAccount-DeveloperBuildReplicationRegistration
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt ReplicationRegistrationRole.Arn
      Runtime: nodejs16.x
      Timeout: 30

  # topic to use as the endpoint for custom resources to register for replication
  ReplicationRegistrationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt ReplicationRegistrationFunction.Arn
          Protocol: lambda
      TopicName: BuildArtifactReplicationRegistration

  # This policy allows any account within the developer org to call the SNS topic
  ReplicationRegistrationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ReplicationRegistrationTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - sns:Publish
            Resource: !Ref ReplicationRegistrationTopic
            Condition:
              ForAnyValue:StringLike:
                aws:PrincipalOrgPaths:
                  - !Ref DeveloperOrgPath

  # permission for the SNS topic to call the lambda function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ReplicationRegistrationTopic
      FunctionName: !GetAtt ReplicationRegistrationFunction.Arn

  # Role for the replication function.
  ReplicationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccount-PipelineS3Replication
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref ReplicationPolicy

  # This policy allows the replication function to read data from the build bucket.
  ReplicationPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CrossAccount-PipelineS3Replication
      Description: Policy for replicating S3 data for developer account pipelines
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:ListBucket'
            Effect: Allow
            Resource:
              - 'Fn::Sub':
                  - 'arn:aws:s3:::${Bucket}'
                  - Bucket: !ImportValue BuildBucket
          - Action:
              - 's3:Get*'
            Effect: Allow
            Resource:
              - 'Fn::Sub':
                  - 'arn:aws:s3:::${Bucket}/*'
                  - Bucket: !ImportValue BuildBucket
          - Action:
              - 'kms:Decrypt'
            Effect: Allow
            Resource: !ImportValue CrossAccountCMK
          - Action:
              - 'dynamodb:Scan'
            Effect: Allow
            Resource:
              - !GetAtt Table.Arn
          - Action:
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Effect: Allow
            NotResource: !Sub 'arn:aws:kms:*:${AWS::AccountId}:*' # nothing in this account
          - Action:
              - s3:PutObject*
            Effect: Allow
            Resource: 'arn:aws:s3:::*-buildbucket-*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CrossAccount-DeveloperBuildReplication'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CrossAccount-DeveloperBuildReplication:*'

  ReplicationLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/CrossAccount-DeveloperBuildReplication
      RetentionInDays: 3

  # This function is triggered on created objects in the build bucket and copies the objects to
  # the developer accounts.
  ReplicationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk')
          const s3 = new AWS.S3({ region: 'us-east-1' });
          const dynamoDB = new AWS.DynamoDB.DocumentClient();

          exports.handler = async function main(event, context) {
            if (event.Records === null) {
              context.fail('Error: Event has no records.');
              return;
            }

            const destBuckets = await getDestinationBuckets();

            // Make a task for each combination of record and destBucket
            let tasks = [];
            for (let i = 0; i < event.Records.length; i++) {
              for (let j = 0; j < destBuckets.length; j++) {
                tasks.push(replicate(event.Records[i], destBuckets[j]));
              }
            }

            await Promise.all(tasks);
          };

          async function getDestinationBuckets() {
            const input = {
              TableName: 'CrossAccount-DeveloperBuildReplication'
            };

            let items = [];
            do {
              const result = await dynamoDB.scan(input).promise();
              if (result.Items) {
                items = items.concat(result.Items);
              }

              input.ExclusiveStartKey = result.LastEvaluatedKey;
            } while (!!input.ExclusiveStartKey);

            return items;
          }

          async function replicate(record, destBucket) {
            // The source bucket and source key are part of the event data
            var srcBucket = record.s3.bucket.name;
            var srcKey = decodeURIComponent(record.s3.object.key.replace(/\+/g, " "));
            var srcVersion = record.s3.object.version;

            // Modify destKey if an alternate copy location is preferred
            var destKey = srcKey;
            var msg = 'copying ' + srcBucket + ':' + srcKey + ' to ' + destBucket.bucketName + ':' + destKey;

            console.log('Attempting: ' + msg);
            return s3.copyObject({
              Bucket: destBucket.bucketName,
              Key: destKey,
              ACL: 'bucket-owner-full-control',
              CopySource: encodeURIComponent(srcBucket + '/' + srcKey + (srcVersion ? ('?versionId=' + srcVersion) : '')),
              MetadataDirective: 'COPY'
            }).promise();
          }
      Description: Copies data from the build bucket to the developer account build buckets
      FunctionName: CrossAccount-DeveloperBuildReplication
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt ReplicationRole.Arn
      Runtime: nodejs16.x
      Timeout: 30

  # Basic permissions to allow the replication function to be triggered by the build bucket.
  ReplicationLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ReplicationFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn:
        'Fn::Sub':
          - 'arn:aws:s3:::${Bucket}'
          - Bucket: !ImportValue BuildBucket

  # This role is only to allow the custom resource for adding a bucket notification to the
  # build bucket. This is a custom resource because bucket notification is part of the bucket
  # definition, which we don't control here, so we need to add it via an API call instead.
  ApplyNotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: S3BucketNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowBucketNotification
                Effect: Allow
                Action: s3:PutBucketNotification
                Resource:
                  - 'Fn::Sub':
                      - 'arn:aws:s3:::${Bucket}'
                      - Bucket: !ImportValue BuildBucket
                  - 'Fn::Sub':
                      - 'arn:aws:s3:::${Bucket}/*'
                      - Bucket: !ImportValue BuildBucket

  ApplyBucketNotificationLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub /aws/lambda/${ApplyBucketNotificationFunction}
      RetentionInDays: 3

  # This function is for adding a bucket notification to the build bucket. This is a custom
  # resource because bucket notification is part of the bucket definition, which we don't control
  # here, so we need to add it via an API call instead. It is only called during deployment of this
  # stack.
  ApplyBucketNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: This function is used as a custom resource to add a bucket notification to an S3 bucket.
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt 'ApplyNotificationFunctionRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import boto3
          import logging
          import json
          import cfnresponse

          s3Client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          def addBucketNotification(bucketName, notificationId, functionArn):
            notificationResponse = s3Client.put_bucket_notification_configuration(
              Bucket=bucketName,
              NotificationConfiguration={
                'LambdaFunctionConfigurations': [
                  {
                    'Id': notificationId,
                    'LambdaFunctionArn': functionArn,
                    'Events': [
                      's3:ObjectCreated:*'
                    ]
                  },
                ]
              }
            )
            return notificationResponse

          def create(properties, physical_id):
            bucketName = properties['S3Bucket']
            notificationId = properties['NotificationId']
            functionArn = properties['FunctionARN']
            response = addBucketNotification(bucketName, notificationId, functionArn)
            logger.info('AddBucketNotification response: %s' % json.dumps(response))
            return cfnresponse.SUCCESS, physical_id

          def update(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def delete(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def handler(event, context):
            logger.info('Received event: %s' % json.dumps(event))

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              logger.error('Exception: %s' % e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)

  # This custom resource creates the notification on the build bucket so that we can trigger a
  # lambda whenever something is created in the build bucket. This is a custom resource because
  # bucket notification is part of the bucket definition, which we don't control here, so we need
  # to add it via an API call instead.
  ApplyNotification:
    Type: Custom::ApplyNotification
    Properties:
      ServiceToken: !GetAtt 'ApplyBucketNotificationFunction.Arn'
      S3Bucket: !ImportValue BuildBucket
      FunctionARN: !GetAtt ReplicationFunction.Arn
      NotificationId: S3ObjectCreatedEvent

Outputs:
  ReplicationRoleArn:
    Description: The role used for replication.
    Value: !GetAtt ReplicationRole.Arn
  ReplicationRegistrationTopicArn:
    Description: The ARN of the SNS topic that is used as the 'ServiceToken' of the custom resources
    Value: !Ref ReplicationRegistrationTopic
    Export:
      Name: ReplicationRegistrationTopicArn
